@page "/usercredentials/edit/{text:guid}"
@using IPassM.Components.Layout
@layout MainLayout

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-header text-white">
                    <h3 class="mb-0">Edit Credential -- {@Text}</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@credential" OnValidSubmit="@HandleValidSubmit" FormName="CredentialEdit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="form-group mt-2">
                            <label for="websiteName">Website Name</label>
                            <InputText id="websiteName" class="form-control" @bind-Value="credential.WebsiteName" />
                        </div>

                        <div class="form-group mt-2">
                            <label for="userName">User Name</label>
                            <InputText id="userName" class="form-control" @bind-Value="credential.UserName" />
                        </div>

                        <div class="form-group mt-2">
                            <label for="password">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="credential.Password" />
                        </div>
                        <a type="button" class="btn gradient-button mt-3 float-start" href="/credential/read">Cancel</a>
                        <button type="submit" class="btn gradient-button mt-3 float-end">Save</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public Guid Text { get; set; }

    private Credential credential { get; set; }
    private ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        //Credential credential = new();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        IEnumerable<Claim> claims = user.Claims;
        string name = claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
        string guid = claims.FirstOrDefault(c => c.Type == "Id")?.Value;
        CsvService csvService = new(name, Guid.Parse(guid));
        credential = csvService.ViewEntries().First();
    }

    private async Task HandleValidSubmit()
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // user = authState.User;
        // IEnumerable<Claim> claims = user.Claims;
        // string name = claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
        // string guid = claims.FirstOrDefault(c => c.Type == "Id")?.Value;

        // CsvService csvService = new(name, Guid.Parse(guid));
        // csvService.AddEntry(credential.WebsiteName, credential.UserName, credential.Password);
        // NavigationManager.NavigateTo("/credential/read");
    }
}