<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-header text-white">
                    <h3 class="mb-0">Edit Credential -- {@Model.WebsiteName}</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="CredentialEdit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="form-group mt-2">
                            <label for="websiteName">Website Name</label>
                            <InputText id="websiteName" class="form-control" @bind-Value="Model!.WebsiteName" />
                        </div>

                        <div class="form-group mt-2">
                            <label for="userName">User Name</label>
                            <InputText id="userName" class="form-control" @bind-Value="Model!.UserName" />
                        </div>

                        <div class="form-group mt-2">
                            <label for="password">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="Model!.Password" />
                        </div>
                        <button type="button" class="btn gradient-button mt-3 float-start" @onclick="Cancel">
                            <i class="bi bi-x-circle"></i>
                            Cancel
                        </button>
                        <button type="submit" class="btn gradient-button mt-3 float-end">
                            <i class="bi bi-save"></i>
                            Save
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public Guid CredentialId { get; set; }
    
    [Parameter]
    public EventCallback onCancelButtonClicked { get; set; }

    [SupplyParameterFromForm]
    private Credential? Model { get; set; }
    private ClaimsPrincipal user;
    private EditContext? editContext;

    public string? Name { get; private set; }
    public string? CredId { get; private set; }
    public CsvService CsvService { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        IEnumerable<Claim> claims = user.Claims;
        Name = claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
        CredId = claims.FirstOrDefault(c => c.Type == "Id")?.Value;
        CsvService csvService = new(Name, Guid.Parse(CredId));
        Model = csvService.ViewEntry(CredentialId);
        editContext = new(Model);
    }

    private async Task HandleValidSubmit()
    {
        IEnumerable<Claim> claims = await GetClaims();
        string name = claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
        string guid = claims.FirstOrDefault(c => c.Type == "Id")?.Value;

        CsvService csvService = new(name!, Guid.Parse(guid!));
        Model!.Password = csvService.GetPassword(CredentialId);
        csvService.UpdateEntry(Model!.WebsiteName, Model!.UserName, Model!.Password);
        await onCancelButtonClicked.InvokeAsync();
    }

    private async Task<IEnumerable<Claim>> GetClaims()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        return user.Claims;
    }

    private async Task Cancel()
    {
        await onCancelButtonClicked.InvokeAsync();
    }
}