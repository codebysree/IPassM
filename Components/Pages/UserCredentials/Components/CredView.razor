@using static IPassM.Components.Pages.UserCredentials.ViewCredentials
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-header text-white">
                    <span>
                        <h3 class="mb-0 float-start">Stored Credentials</h3>
                        <button class="btn btn-pinky text-white float-end" @onclick="@((evt) => DoAction("Add"))">
                            <i class="bi bi-patch-plus"></i>
                            Add
                        </button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th>Website Name</th>
                                    <th>User Name</th>
                                    <th>Password</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var credential in credentials)
                                {
                                    <tr>
                                        <td>@credential.WebsiteName</td>
                                        <td>@credential.UserName</td>
                                        <td>@credential.Password</td>
                                        <td>
                                            <span title="Edit" @onclick="(e =>Edit(credential))"><i class="bi bi-pencil-square"></i></span>
                                            <span title="Delete" @onclick="(e=> Delete(credential))"><i class="bi bi-trash3-fill"></i></span>
                                            <span title="Show" @onclick="(e=>ViewPassword(credential))"><i class="bi bi-eye-fill"></i></span>
                                            <span title="Show" @onclick="(e=>HidePassword(credential))"><i class="bi bi-eye-slash-fill"></i></span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    #region Parameters
    [Parameter]
    public EventCallback<PassParam> onAddButtonClicked { get; set; }
    #endregion

    public string? Name { get; private set; }
    public string? CredId { get; private set; }
    public CsvService? CsvService { get; private set; }

    private List<Credential> credentials = new List<Credential>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        var claims = user.Claims;
        Name = claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
        CredId = claims.FirstOrDefault(c => c.Type == "Id")?.Value;
        CsvService = new(Name, Guid.Parse(CredId));
        credentials = await FetchCredentials();
    }

    private async Task Delete(Credential credential)
    {
        await Task.Delay(0);
        CsvService?.DeleteEntry(credential.CredentialId);
        PassParam passParam = new("View");
        await onAddButtonClicked.InvokeAsync(passParam);
    }

    private async Task ViewPassword(Credential credential)
    {
        await Task.Delay(0);
        credential.Password = CsvService.GetPassword(credential.CredentialId);
    }

    private async Task HidePassword(Credential credential)
    {
        await Task.Delay(0);
        credential.Password = "****";
    }

    private async Task Edit(Credential credential)
    {
        await Task.Delay(0);
        PassParam passParam = new("Edit", credential.CredentialId);
        await onAddButtonClicked.InvokeAsync(passParam);
    }

    private async Task DoAction(string action)
    {
        PassParam passParam = new(action);
        await onAddButtonClicked.InvokeAsync(passParam);
    }

    private async Task<List<Credential>> FetchCredentials()
    {
        await Task.Delay(0);
        return CsvService.ViewEntries();
    }
}
