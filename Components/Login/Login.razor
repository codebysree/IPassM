@page "/Login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies


@layout LoginLayout

<div class="login-box">
    <h2 class="text-center">Login</h2>
    <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="login-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email ID</label>
            <InputText id="email" class="form-control" @bind-Value="Model.Email" />
            <ValidationMessage For="@(() => Model.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>

        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
    <hr />
    <a href="register">Register Here</a>
</div>

@code {

    [SupplyParameterFromForm]
    public LoginModel Model { get; set; }

    protected override void OnInitialized() => Model ??= new();

    private async Task HandleValidSubmit()
    {

        //var user = await AuthenticateUser(loginModel.Email, loginModel.Password);

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.Email),
            new Claim("FullName", "Sreekumar"),
            new Claim(ClaimTypes.Role, "Administrator"),
        };

        var claimsIdentity = new ClaimsIdentity(
            claims, CookieAuthenticationDefaults.AuthenticationScheme);

        var authProperties = new AuthenticationProperties
        {
            //AllowRefresh = <bool>,
            // Refreshing the authentication session should be allowed.

            //ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(10),
            // The time at which the authentication ticket expires. A
            // value set here overrides the ExpireTimeSpan option of
            // CookieAuthenticationOptions set with AddCookie.

            //IsPersistent = true,
            // Whether the authentication session is persisted across
            // multiple requests. When used with cookies, controls
            // whether the cookie's lifetime is absolute (matching the
            // lifetime of the authentication ticket) or session-based.

            //IssuedUtc = <DateTimeOffset>,
            // The time at which the authentication ticket was issued.

            //RedirectUri = <string>
            // The full path or absolute URI to be used as an http
            // redirect response value.
        };

        await httpContextAccessor.HttpContext.SignInAsync(
                CookieAuthenticationDefaults.AuthenticationScheme,
                new ClaimsPrincipal(claimsIdentity),
                authProperties);


        NavigationManager.NavigateTo("/");
    }

    public class LoginModel
    {
        //[Required]
        [EmailAddress]
        public string Email { get; set; }

        //[Required]
        [MinLength(6)]
        public string Password { get; set; }
    }
}

